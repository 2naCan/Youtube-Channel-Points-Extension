import { $ as SolanaFundingConfig } from './types.js';
export { aE as ConnectedSolanaWallet, S as SolanaAdapterConnector, D as SolanaTransactionReceipt, A as SupportedSolanaTransaction, aG as toSolanaWalletConnectors } from './types.js';
import { P as PrivyEvents } from './useSolanaWallets.js';
export { U as UseSolanaWalletsInterface, u as useSolanaWallets } from './useSolanaWallets.js';
import '@metamask/eth-sig-util';
import '@ethersproject/providers';
import 'eventemitter3';
import '@privy-io/public-api';
import '@solana/wallet-adapter-base';
import 'react';
import 'viem';
import 'web3-core';
import '@privy-io/js-sdk-core';
import '@solana/web3.js';

/**
 * Method to fund a user's wallet via Privy's funding feature by inputting a valid wallet address.
 * You can access the fields and methods documented here via the {@link useFundWallet} hook.
 */
interface UseFundSolanaWalletInterface {
    /**
     * Prompt the user to go through the funding flow and for a specified wallet.
     *
     * This will open the modal with a prompt for the user to select a funding method (if multiple are enabled).
     *
     * Once the user continues to the funding flow, Privy will display the funding status screen, and wait
     * for the transaction to complete.
     *
     * Note: Even after a successful funding, funds can take a few minutes to arrive in the user's wallet.
     *
     * Privy currently supports funding via external wallets and Moonpay.
     *
     * @param address typed data payload to be signed
     * @param fundWalletConfig {@link SolanaFundingConfig} Funding configuration to specify chain and funding amount (if enabled)
     */
    fundWallet: (address: string, fundWalletConfig?: SolanaFundingConfig) => Promise<void>;
}
/**
 * Hook to fund a wallet via Privy's fiat on-ramp integration given the wallet address.
 *
 * @param callbacks.onUserExited {@link PrivyEvents} Callback that will execute when a funding flow is exited. This fires when a user closes a funding flow modal, for any reason.
 * @returns fundWallet - function to on-ramp funds to any given wallet
 */
declare const useFundWallet: (callbacks?: PrivyEvents["fundSolanaWallet"]) => UseFundSolanaWalletInterface;

export { type UseFundSolanaWalletInterface, useFundWallet };
